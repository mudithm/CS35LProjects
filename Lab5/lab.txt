Name:  Mudith Mallajosyula
UID:   404937201
Lab:   2


---

tr2b and tr2u attempt to replicate the functionality of the tr bash command,
with certain restrictions, as mentioned in the assignment specification.

tr2b uses buffered I/O while tr2u uses system calls directly for I/O.

Both tr2b and tr2u used the same logic, with only the reading and writing
implementations differing. Therefore, the differences in performance should be
due mostly to the difference between library functions and system calls.


tr2b used the putchar and getchar functions of the C stdio library to read and
write.  tr2u used the read and write functions to do the same.  Both functions
used the same logic for error checking, but different functions to write to
stderr.


The programs were tested with a large file of 5,000,000 bytes.  This file was
called largeFile.txt, and was created using the C program from Piazza.




(3a)
Results of strace on tr2b when copying to another file:

strace -o tr2b_strace ./tr2b 'abcdef' 'fabcde' < largeFile.txt > tr2b_out
cat tr2b_strace | wc -l

resulted in 186 lines, meaning that approximately 186 syscalls were made.


Results of strace on tr2u when copying to another file:

strace -o tr2u_strace ./tr2u 'abcdef' 'fabcde' < largeFile.txt > tr2u_out
cat tr2u_strace | wc -l

resulted in 10000028 lines, meaning that approximately 10000028 syscalls were
made.

Far more syscalls were made for tr2u, and it ran significantly slower.




(3b)
Results of strace on tr2b when copying to terminal:

strace -o tr2b_strace ./tr2b 'abcdef' 'fabcde' < largeFile.txt
cat tr2b_strace | wc -l

resulted in 4992 lines, meaning that approximately 4992 syscalls were made.


Results of strace on tr2u when copying to terminal:

strace -o tr2u_strace ./tr2u 'abcdef' 'fabcde' < largeFile.txt
cat tr2u_strace | wc -l

resulted in 10000028 lines, meaning that approximately 10000028 syscalls were
made.

Again, far more syscalls were made for tr2u, and it ran significantly
slower. The number of syscalls for tr2u did not change, but the number of
syscalls for tr2b increased significanty.


(4)
Result of time on tr2b when copying to file:
time ./tr2b 'abcdef' 'fabcde' < largeFile.txt > tr2b_out

real    0m0.502s
user    0m0.443s
sys     0m0.012s


Result of time on tr2u when copying to file:
time ./tr2u 'abcdef' 'fabcde' < largeFile.txt > tr2u_out

real    0m8.458s
user    0m1.163s
sys     0m7.256s


The buffered I/O method is clearly faster than the individual syscall method,
largely because the number of system calls that are made is much, much lower.


----
----

